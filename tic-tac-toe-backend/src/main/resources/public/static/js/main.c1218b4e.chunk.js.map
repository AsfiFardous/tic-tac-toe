{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","style","this","value","React","Component","Board","state","squares","Array","fill","next","nextValue","user_id","player1","player2","user_name1","user_name2","isFinished","waitForNextPlayer","i","slice","setState","winner","calculateWinner","draw","isDraw","gamestate","addUpdatePromise","fetch","method","headers","body","game_id","user_name","then","response","console","log","catch","error","repeatRequest","setInterval","json","jsonResponse","status","clearInterval","position","lastValue","handleClick","color","renderSquare","href","window","location","variant","width","marginTop","size","Game","Page","urlParams","URLSearchParams","search","page","get","gameId","repeatedRequest","firstPlayer","secondPlayer","username1","username2","userId","waitForGaneStart","alert","event","target","copyTextarea","document","querySelector","focus","select","execCommand","err","md","span","offset","lg","pill","src","rounded","Control","type","placeholder","onChange","handleChange","bind","handleClickAnonymous","handleClickFriend","shareLink","Append","handleCopyLink","lines","length","a","b","c","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c1218b4e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { WSAEINVALIDPROVIDER } from 'constants';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { bool } from 'prop-types';\nimport Image from 'react-bootstrap/Image';\nimport Badge from 'react-bootstrap/Badge';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\n\nclass Square extends React.Component {\n\n    render() {\n        return (\n            <button className=\"square\" onClick={() => this.props.onClick()}>\n                <span style={{ 'color': this.props.value === 'X' ? 'blue' : 'black' }}>{this.props.value}</span>\n            </button>\n        )\n    };\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            next: this.props.next,\n            nextValue: 'X',\n            user_id: this.props.user_id,\n            player1: this.props.player1,\n            player2: this.props.player2,\n            user_name1: this.props.user_name1,\n            user_name2: this.props.user_name2,\n            isFinished: false\n        };\n        if (this.state.user_id === this.state.player2) {\n            this.waitForNextPlayer();\n        }\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.props.user_id !== this.state.next || squares[i] || this.state.isFinished) {\n            return;\n        }\n        squares[i] = this.state.nextValue;\n\n        if (this.state.next == this.state.player1) {\n            this.setState({\n                squares: squares,\n                next: this.state.player2,\n                nextValue: 'O',\n\n            });\n        }\n        else {\n            this.setState({\n                squares: squares,\n                next: this.state.player1,\n                nextValue: 'X',\n\n            });\n        }\n\n        let winner = calculateWinner(squares);\n        let draw = isDraw(squares);\n\n        if (winner || draw) {\n            let gamestate = winner ? 'Finished' : 'Draw';\n            let addUpdatePromise = fetch(\"/game-status\", {\n                method: 'post',\n                headers: {\n                    \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                },\n                body: 'game_id=' + this.props.game_id + '&winner=' + winner + '&status='\n                    + gamestate + '&cur_state=' + squares[i] + '&position=' + i + '&user_id=' + this.props.user_id\n                    + '&next=' + this.props.user_name\n            })\n            this.setState({\n                isFinished: true\n            });\n            addUpdatePromise.then((response) => {\n                console.log(response);\n            })\n                .catch(function (error) {\n                    console.log(error);\n                });\n\n        }\n\n        else {\n            let addPromise = fetch(\"/add\", {\n                method: 'post',\n                headers: {\n                    \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                },\n                body: 'cur_state=' + squares[i] + '&position=' + i + '&game_id=' + this.props.game_id + '&user_id=' + this.props.user_id + '&next=' + this.props.user_name\n\n            });\n\n            addPromise.then((response) => {\n                console.log(response);\n            })\n                .catch(function (error) {\n                    console.log(error);\n                });\n\n            this.waitForNextPlayer();\n        }\n    }\n\n\n    waitForNextPlayer() {\n        let repeatRequest = setInterval(() => {\n            let whoNextPromise = fetch(\"/whoNext?game_id=\" + this.props.game_id);\n            whoNextPromise.then((response) => response.json())\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    // if(this.state.isFinished){\n                    //     clearInterval(repeatRequest);\n                    // }\n                    if (jsonResponse.status === 'Finished' || jsonResponse.status === 'Draw') {\n                        clearInterval(repeatRequest);\n                        const squares = this.state.squares.slice();\n                        squares[jsonResponse.position] = jsonResponse.lastValue;\n                        this.setState({\n                            squares: squares,\n                            isFinished: true\n                        });\n\n                    }\n                    else {\n                        if (jsonResponse.next == this.props.user_id) {\n                            clearInterval(repeatRequest);\n                            const squares = this.state.squares.slice();\n                            squares[jsonResponse.position] = jsonResponse.lastValue;\n                            if (jsonResponse.lastValue == 'X') {\n                                this.setState({\n                                    squares: squares,\n                                    next: jsonResponse.next,\n                                    nextValue: 'O',\n\n                                });\n                            }\n                            else {\n                                this.setState({\n                                    squares: squares,\n                                    next: jsonResponse.next,\n                                    nextValue: 'X',\n\n                                });\n                            }\n                        }\n                        else {\n                            this.setState({ next: jsonResponse.next });\n\n                        }\n                    }\n                })\n                .catch(function (error) {\n                    // alert('Cloud not start game');\n                    console.log(error);\n                });\n        }, 2000);\n    }\n\n    renderSquare(i) {\n        return <Square\n            value={this.state.squares[i]\n            }\n            onClick={() => this.handleClick(i)}\n        />;\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if (winner == 'X') {\n            status = <div className=\"status\">Winner:  <span style={{ color: 'blue' }} >{this.state.user_name1}</span></div>\n        }\n        else if (winner == 'O') {\n            status = <div className=\"status\">Winner:  <span style={{ color: 'blue' }} >{this.state.user_name2}</span></div>\n        }\n        else if (isDraw(this.state.squares)) {\n            status = <div className=\"status\" style={{ color: 'blue' }}>Draw</div>\n        }\n        else {\n            if (this.state.nextValue == 'X') {\n                status = <div className=\"status\">Next player:  <span style={{ color: 'blue' }} >{this.state.user_name1}</span></div>\n            }\n            else {\n                status = <div className=\"status\">Next player:  <span style={{ color: 'blue' }} >{this.state.user_name2}</span></div>\n            }\n        }\n\n        return (\n            <div  className=\"play\">\n                {status}\n                {/* <div className=\"status\">{status}</div> */}\n                <table>\n                    <tbody>\n                        <tr className=\"row-separator\">\n                            <td className=\"col-separator\">{this.renderSquare(0)}</td>\n                            <td className=\"col-separator\">{this.renderSquare(1)}</td>\n                            <td>{this.renderSquare(2)}</td>\n                        </tr>\n                        <tr className=\"row-separator\">\n                            <td className=\"col-separator\">{this.renderSquare(3)}</td>\n                            <td className=\"col-separator\">{this.renderSquare(4)}</td>\n                            <td>{this.renderSquare(5)}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"col-separator\">{this.renderSquare(6)}</td>\n                            <td className=\"col-separator\">{this.renderSquare(7)}</td>\n                            <td>{this.renderSquare(8)}</td>\n                        </tr>\n                    </tbody>\n                </table>\n\n               {(this.state.isFinished) && <Button href={window.location.href} variant=\"primary\" style={{ width: '210px', marginTop: '1em'  }} size=\"lg\">Play Again</Button> } \n            </div>\n        );\n    };\n}\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board game_id={this.props.game_id} user_id={this.props.user_id} next={this.props.next} player1={this.props.player1} player2={this.props.player2} user_name1={this.props.user_name1} user_name2={this.props.user_name2} />\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass Page extends React.Component {\n    constructor(props) {\n        super(props);\n        const urlParams = new URLSearchParams(window.location.search);\n        this.state = {\n            page: 1,\n            user_id: null,\n            user_name: null,\n            user_name1: null,\n            user_name2: null,\n            game_id: urlParams.get('gameid') || '',\n            value: null,\n            player1: null,\n            player2: null,\n            next: null,\n            // title: ''\n        };\n    }\n\n    waitForGaneStart(gameId) {\n        let repeatedRequest = setInterval(() => {\n            let creatIsStartProimse = fetch(\"/start-response?game_id=\" + gameId);\n            creatIsStartProimse.then((response) => response.json())\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    if (jsonResponse.status === 'Started') {\n                        clearInterval(repeatedRequest);\n                        this.setState({\n                            page: 2,\n                            game_id: jsonResponse.gameId,\n                            user_id: jsonResponse.firstPlayer,\n                            // user_name:jsonResponse.firstUsername,\n                            next: jsonResponse.firstPlayer,\n                            player1: jsonResponse.firstPlayer,\n                            player2: jsonResponse.secondPlayer,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2\n                        });\n                    }\n                })\n                .catch(function (error) {\n                    // alert('Cloud not start game');\n                    console.log(error);\n                });\n        }, 2000);\n\n    }\n\n\n\n\n    handleClickFriend() {\n        if (this.state.user_name != null) {\n            let value = this.state.game_id;\n            if (!this.state.game_id) {\n                value = -1;\n            }\n            let createGamePromise = fetch(\"/play-game-with-friend?username=\" + this.state.user_name + \"&gameId=\" + value);\n\n            createGamePromise.then((response) => response.json())\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    if (jsonResponse.status === 'WaitingForFriend') {\n                        this.setState({\n                            page: 4,\n                            game_id: jsonResponse.gameId,\n                            user_id: jsonResponse.userId,\n                            player1: jsonResponse.userId,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2\n                        });\n                        this.waitForGaneStart(jsonResponse.gameId);\n                    }\n\n                    else if (jsonResponse.status === 'Started') {\n                        this.setState({\n                            page: 2,\n                            game_id: jsonResponse.gameId,\n                            // player1: jsonResponse.firstPlayer,\n                            user_id: jsonResponse.userId,\n                            //next: jsonResponse.firstPlayer,\n                            //user_name: jsonResponse.secondUsername,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2,\n                            player2: jsonResponse.userId,\n                        });\n                    }\n                    else {\n                        alert('Game not found');\n                    }\n                })\n                .catch(function (error) {\n                    alert('Cloud not start game');\n                    console.log(error);\n                });\n        }\n        else {\n            alert('Please enter username');\n        }\n\n    }\n\n    handleClickAnonymous() {\n        if (this.state.user_name !== null) {\n\n            let createGamePromise = fetch(\"/create-game?username=\" + this.state.user_name);\n            createGamePromise.then((response) => response.json())\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    if (jsonResponse.status != 'Started') {\n                        this.setState({\n                            page: 3,\n                            game_id: jsonResponse.gameId,\n                            user_id: jsonResponse.userId,\n                            player1: jsonResponse.userId,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2\n                        });\n                        this.waitForGaneStart(jsonResponse.gameId);\n                    }\n                    else {\n                        this.setState({\n                            page: 2,\n                            game_id: jsonResponse.gameId,\n                            user_id: jsonResponse.userId,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2,\n                            player2: jsonResponse.userId,\n                        });\n                    }\n                })\n                .catch(function (error) {\n                    alert('Cloud not start game');\n                    console.log(error);\n                });\n        }\n        else {\n            alert('Please enter username');\n        }\n\n    }\n\n    handleChange(event) {\n        this.setState({ user_name: event.target.value })\n    }\n    handleGameIdChange(event) {\n        this.setState({ game_id: event.target.value })\n    }\n\n    handleCopyLink(event) {\n        var copyTextarea = document.querySelector('.js-copytextarea');\n        copyTextarea.focus();\n        copyTextarea.select();\n\n        try {\n            var successful = document.execCommand('copy');\n            // var msg = successful ? 'successful' : 'unsuccessful';\n            alert('Copied');\n        } catch (err) {\n            alert('Oops, unable to copy');\n        }\n    }\n\n    render() {\n        if (this.state.page === 1) {\n            return (\n                <Container>\n                    <div >\n                        <Row>\n                        \n                            <Col md={{ span: 6, offset: 3 }} lg={{ span: 4, offset: 4 }} className=\"flex-center\">\n                                <h1>\n                                    <Badge pill variant=\"success\">\n                                        TIC TAC TOE\n                                        </Badge>{' '}\n                                </h1>\n                                <div>\n                                    <Image src=\"/tic_tac_toe.gif\" rounded />\n                                </div>\n                                <div>\n                                    <Form.Control style={{ marginTop: '1em' }} size=\"lg\" type=\"text\" placeholder=\"Your name\" value={this.state.user_name} onChange={this.handleChange.bind(this)} />\n                                </div>\n                                <div className=\"control-button\">\n                                    {!this.state.game_id && <Button variant=\"primary\" style={{ marginTop: '1em' }} size=\"lg\" onClick={this.handleClickAnonymous.bind(this)}>Play with anonymous</Button>}\n                                </div>\n                                <div className=\"control-button\">\n                                    <Button variant=\"primary\" style={{ width: '210px' }} size=\"lg\" onClick={this.handleClickFriend.bind(this)}>{this.state.game_id ? 'Join Game' : 'Play with friend'}</Button>\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>\n\n                </Container >\n\n            );\n        }\n        else if (this.state.page === 2) {\n            return (\n                <Container>\n                    <div >\n                        <Row>\n                            <Col md={{ span: 6, offset: 3 }} lg={{ span: 4, offset: 4 }}  className=\"flex-center\">\n                                <h1>\n                                    <Badge pill variant=\"success\">\n                                        TIC TAC TOE\n                                        </Badge>{' '}\n                                </h1>\n                                <div style={{ marginTop: '1em' }}>\n                                    <Game game_id={this.state.game_id} user_id={this.state.user_id} next={this.state.next} player1={this.state.player1} player2={this.state.player2} user_name1={this.state.user_name1} user_name2={this.state.user_name2} />\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>\n\n                </Container>\n\n            );\n        }\n        else if (this.state.page === 3) {\n            return (\n                <Container>\n                    <div >\n                        <Col md={{ span: 6, offset: 3 }} lg={{ span: 4, offset: 4 }} className=\"flex-center\">\n                            <h1>\n                                <Badge pill variant=\"success\">\n                                    TIC TAC TOE\n                                        </Badge>{' '}\n                            </h1>\n                            <div >\n                                <Image src=\"/tic_tac_toe.gif\" rounded />\n\n                            </div>\n                            <div>\n                                <h3 style={{ color: 'blue', marginTop: '1em' }}>Waiting for second player</h3>\n                            </div>\n                        </Col>\n                    </div>\n                </Container>\n            )\n        }\n\n        else if (this.state.page === 4) {\n            let shareLink = window.location.href + '?gameid=' + this.state.game_id;\n            return (\n                <Container>\n                    <div >\n                        <Col md={{ span: 6, offset: 3 }} lg={{ span: 4, offset: 4 }} className=\"flex-center\">\n                            <h1 >\n                                <Badge pill variant=\"success\">\n                                    TIC TAC TOE\n                                        </Badge>{' '}\n                            </h1>\n                            <div>\n                                <Image src=\"/tic_tac_toe.gif\" rounded />\n                            </div>\n                            <div >\n                                <h3 style={{ color: 'blue', marginTop: '1em' }}>{'Share this link: '}</h3>\n                            </div>\n                            <div >\n                                <p>\n                                    <InputGroup className=\"mb-3\">\n                                        <FormControl\n                                            value={shareLink}\n                                            className=\"js-copytextarea\"\n                                        />\n                                        <InputGroup.Append>\n                                            <Button variant=\"outline-secondary\" onClick={this.handleCopyLink.bind(this)} >Copy Link</Button>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </p>\n                            </div>\n\n                        </Col>\n                    </div>\n                </Container>\n            )\n        }\n    }\n}\n\nReactDOM.render(\n    <Page />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] == squares[b] && squares[a] == squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nfunction isDraw(squares) {\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] == null) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"sourceRoot":""}