{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","style","this","value","React","Component","Board","state","squares","Array","fill","next","nextValue","user_id","player1","player2","user_name1","user_name2","isFinished","waitForNextPlayer","i","slice","setState","winner","calculateWinner","draw","isDraw","gamestate","addUpdatePromise","fetch","method","headers","body","game_id","user_name","then","response","console","log","catch","error","repeatRequest","setInterval","json","jsonResponse","status","clearInterval","position","lastValue","handleClick","renderSquare","Game","Page","urlParams","URLSearchParams","window","location","search","page","get","gameId","repeatedRequest","firstPlayer","secondPlayer","username1","username2","userId","waitForGaneStart","alert","event","target","md","span","offset","pill","variant","src","rounded","htmlFor","type","onChange","handleChange","bind","marginTop","size","handleClickAnonymous","handleClickFriend","color","shareLink","href","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6439a0cf.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { WSAEINVALIDPROVIDER } from 'constants';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { bool } from 'prop-types';\nimport Image from 'react-bootstrap/Image';\nimport Badge from 'react-bootstrap/Badge';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Form from 'react-bootstrap/Form'\n\n\nclass Square extends React.Component {\n\n    render() {\n        return (\n            <button className=\"square\" onClick={() => this.props.onClick()}>\n                <span style={{ 'color': this.props.value === 'X' ? 'blue' : 'black' }}>{this.props.value}</span>\n            </button>\n        )\n    };\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            next: this.props.next,\n            nextValue: 'X',\n            user_id: this.props.user_id,\n            player1: this.props.player1,\n            player2: this.props.player2,\n            user_name1: this.props.user_name1,\n            user_name2: this.props.user_name2,\n            isFinished: false\n        };\n        if (this.state.user_id === this.state.player2) {\n            this.waitForNextPlayer();\n        }\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.props.user_id !== this.state.next || squares[i] || this.state.isFinished) {\n            return;\n        }\n        squares[i] = this.state.nextValue;\n\n        if (this.state.next == this.state.player1) {\n            this.setState({\n                squares: squares,\n                next: this.state.player2,\n                nextValue: 'O',\n\n            });\n        }\n        else {\n            this.setState({\n                squares: squares,\n                next: this.state.player1,\n                nextValue: 'X',\n\n            });\n        }\n\n        let winner = calculateWinner(squares);\n        let draw = isDraw(squares);\n\n        if (winner || draw) {\n            let gamestate = winner ?  'Finished':'Draw';\n            let addUpdatePromise = fetch(\"/game-status\", {\n                method: 'post',\n                headers: {\n                    \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                },\n                body: 'game_id=' + this.props.game_id + '&winner=' + winner + '&status='\n                       + gamestate +'&cur_state=' + squares[i] + '&position=' + i + '&user_id=' + this.props.user_id\n                        + '&next=' + this.props.user_name \n            })\n            this.setState({\n                isFinished: true\n            });\n            addUpdatePromise.then((response) => {\n            console.log(response);\n             })\n            .catch(function (error) {\n                console.log(error);\n            });\n          \n        }\n\n        else{\n            let addPromise = fetch(\"/add\", {\n                        method: 'post',\n                        headers: {\n                            \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                        },\n                        body: 'cur_state=' + squares[i] + '&position=' + i + '&game_id=' + this.props.game_id + '&user_id=' + this.props.user_id +'&next=' + this.props.user_name\n            \n                    });\n            \n                    addPromise.then((response) => {\n                        console.log(response);\n                    })\n                        .catch(function (error) {\n                            console.log(error);\n                        });\n            \n                    this.waitForNextPlayer();\n        }   \n    }\n   \n\n    waitForNextPlayer() {\n        let repeatRequest = setInterval(() => {\n            let whoNextPromise = fetch(\"/whoNext?game_id=\" + this.props.game_id);\n            whoNextPromise.then((response) => response.json())\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    // if(this.state.isFinished){\n                    //     clearInterval(repeatRequest);\n                    // }\n                    if(jsonResponse.status === 'Finished' || jsonResponse.status === 'Draw' ){\n                        clearInterval(repeatRequest);\n                        const squares = this.state.squares.slice();\n                        squares[jsonResponse.position] = jsonResponse.lastValue;\n                        this.setState({\n                            squares: squares,\n                            isFinished: true\n                        });\n                        \n                    }\n                    else {\n                        if ( jsonResponse.next == this.props.user_id ) {\n                        clearInterval(repeatRequest);\n                        const squares = this.state.squares.slice();\n                        squares[jsonResponse.position] = jsonResponse.lastValue;\n                        if (jsonResponse.lastValue == 'X') {\n                            this.setState({\n                                squares: squares,\n                                next: jsonResponse.next,\n                                nextValue: 'O',\n\n                            });\n                        }\n                        else {\n                            this.setState({\n                                squares: squares,\n                                next: jsonResponse.next,\n                                nextValue: 'X',\n\n                            });\n                        }\n                      }\n                     else {\n                        this.setState({ next: jsonResponse.next });\n                     \n                    }\n                }\n                })\n                .catch(function (error) {\n                    // alert('Cloud not start game');\n                    console.log(error);\n                });\n        }, 2000);\n    }\n\n    renderSquare(i) {\n        return <Square\n            value={this.state.squares[i]\n            }\n            onClick={() => this.handleClick(i)}\n        />;\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if (winner =='X') {\n            status = 'Winner: ' + (this.state.user_name1);\n        }\n        else if(winner == 'O'){\n            status = 'Winner: ' + (this.state.user_name2);\n        }\n        else if (isDraw(this.state.squares)) {\n            status = 'Draw';\n        }\n        else {\n            if (this.state.nextValue == 'X') {\n                status = 'Next player: ' + (this.state.user_name1);\n            }\n            else {\n                status = 'Next player: ' + (this.state.user_name2);\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                <table>\n                    <tbody>\n                        <tr className=\"row-separator\">\n                            <td className=\"col-separator\">{this.renderSquare(0)}</td>\n                            <td className=\"col-separator\">{this.renderSquare(1)}</td>\n                            <td>{this.renderSquare(2)}</td>\n                        </tr>\n                        <tr className=\"row-separator\">\n                            <td className=\"col-separator\">{this.renderSquare(3)}</td>\n                            <td className=\"col-separator\">{this.renderSquare(4)}</td>\n                            <td>{this.renderSquare(5)}</td>\n                        </tr>\n                        <tr>\n                            <td className=\"col-separator\">{this.renderSquare(6)}</td>\n                            <td className=\"col-separator\">{this.renderSquare(7)}</td>\n                            <td>{this.renderSquare(8)}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    };\n}\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board game_id={this.props.game_id} user_id={this.props.user_id} next={this.props.next} player1={this.props.player1} player2={this.props.player2} user_name1={this.props.user_name1} user_name2={this.props.user_name2} />\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass Page extends React.Component {\n    constructor(props) {\n        super(props);\n        const urlParams = new URLSearchParams(window.location.search);\n        this.state = {\n            page: 1,\n            user_id: null,\n            user_name: null,\n            user_name1: null,\n            user_name2: null,\n            game_id: urlParams.get('gameid') || '',\n            value: null,\n            player1: null,\n            player2: null,\n            next: null,\n            // title: ''\n        };\n    }\n\n    waitForGaneStart(gameId) {\n        let repeatedRequest = setInterval(() => {\n            let creatIsStartProimse = fetch(\"/start-response?game_id=\" + gameId);\n            creatIsStartProimse.then((response) => response.json())\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    if (jsonResponse.status === 'Started') {\n                        clearInterval(repeatedRequest);\n                        this.setState({\n                            page: 2,\n                            game_id: jsonResponse.gameId,\n                            user_id: jsonResponse.firstPlayer,\n                            // user_name:jsonResponse.firstUsername,\n                            next: jsonResponse.firstPlayer,\n                            player1: jsonResponse.firstPlayer,\n                            player2: jsonResponse.secondPlayer,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2\n                        });\n                    }\n                })\n                .catch(function (error) {\n                    // alert('Cloud not start game');\n                    console.log(error);\n                });\n        }, 2000);\n\n    }\n\n\n\n\nhandleClickFriend() {\n    if (this.state.user_name != '') {\n        let value = this.state.game_id;\n        if(!this.state.game_id){\n            value=-1;\n        }\n        let createGamePromise = fetch(\"/play-game-with-friend?username=\" + this.state.user_name + \"&gameId=\" + value);\n\n        createGamePromise.then((response) => response.json())\n            .then(jsonResponse => {\n                console.log(jsonResponse);\n                if (jsonResponse.status === 'WaitingForFriend'){\n                    this.setState({\n                        page: 4,\n                        game_id: jsonResponse.gameId,\n                        user_id: jsonResponse.userId,\n                        player1: jsonResponse.userId,\n                        user_name1: jsonResponse.username1,\n                        user_name2: jsonResponse.username2\n                    });\n                    this.waitForGaneStart(jsonResponse.gameId);\n                }\n                \n                else if(jsonResponse.status === 'Started')\n                    {\n                    this.setState({\n                    page: 2,\n                    game_id: jsonResponse.gameId,\n                    // player1: jsonResponse.firstPlayer,\n                    user_id: jsonResponse.userId,\n                    //next: jsonResponse.firstPlayer,\n                    //user_name: jsonResponse.secondUsername,\n                    user_name1: jsonResponse.username1,\n                    user_name2: jsonResponse.username2,\n                    player2: jsonResponse.userId,\n                });\n            }\n            else{\n                alert('Game not found');\n            }\n        })\n        .catch(function (error) {\n            alert('Cloud not start game');\n            console.log(error);\n        });\n}\n\n}\n\n    handleClickAnonymous() {\n        if (this.state.user_name !== '') {\n\n            let createGamePromise = fetch(\"/create-game?username=\" + this.state.user_name);\n            createGamePromise.then((response) => response.json())\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    if (jsonResponse.status != 'Started') {\n                        this.setState({\n                            page: 3,\n                            game_id: jsonResponse.gameId,\n                            user_id: jsonResponse.userId,\n                            player1: jsonResponse.userId,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2\n                            //player2: jsonResponse.secondPlayer\n                        });\n                        this.waitForGaneStart(jsonResponse.gameId);\n                    }\n                    else {\n                        this.setState({\n                            page: 2,\n                            game_id: jsonResponse.gameId,\n                            // player1: jsonResponse.firstPlayer,\n                            user_id: jsonResponse.userId,\n                            //next: jsonResponse.firstPlayer,\n                            //user_name: jsonResponse.secondUsername,\n                            user_name1: jsonResponse.username1,\n                            user_name2: jsonResponse.username2,\n                            player2: jsonResponse.userId,\n                        });\n                    }\n                })\n                .catch(function (error) {\n                    alert('Cloud not start game');\n                    console.log(error);\n                });\n        }\n\n    }\n\n    handleChange(event) {\n        this.setState({ user_name: event.target.value })\n    }\n    handleGameIdChange(event){\n        this.setState({ game_id: event.target.value })\n    }\n\n    render() {\n        if (this.state.page === 1) {\n            return (\n                <Container>\n                    <div className=\"play\">\n                        <Row>\n                            <Col md={{ span: 4, offset: 4 }}>\n                                <h1><Badge pill variant=\"success\">\n                                    TIC TAC TOE\n                                </Badge>{' '}</h1>\n                                <Image src=\"/tic_tac_toe.gif\" rounded />\n                                <br />\n                                <br />\n\n                                <label htmlFor=\"formGroupExampleInput\">Username</label>\n                                <br />\n                                <input type=\"text\" value={this.state.user_name}\n                                    onChange={this.handleChange.bind(this)} />\n                                <br />\n                               \n                                <Button variant=\"primary\" style={{ marginTop: '1em'}} size=\"lg\" onClick={this.handleClickAnonymous.bind(this)}>Play with anonymous</Button>\n                                <Button variant=\"primary\"  style={{ marginTop: '1em'}}  size=\"lg\" onClick={this.handleClickFriend.bind(this)}>Play with friend</Button>\n                            </Col>\n                        </Row>\n                    </div>\n\n                </Container>\n\n            );\n        }\n        else if (this.state.page === 2) {\n            return (\n                <Container>\n                    <div className=\"play\">\n                        <Row>\n                            <Col md={{ span: 4, offset: 4 }}>\n                                <Game game_id={this.state.game_id} user_id={this.state.user_id} next={this.state.next} player1={this.state.player1} player2={this.state.player2} user_name1={this.state.user_name1} user_name2={this.state.user_name2} />\n                            </Col>\n                        </Row>\n                    </div>\n\n                </Container>\n\n            );\n        }\n        else if (this.state.page === 3) {\n            return (\n                <container>\n                    <div className=\"play\">\n                        <Col md={{ span: 4, offset: 4 }}>\n                            <h1 style={{ color: 'blue' }}>Waiting for second player</h1>\n                        </Col>\n                    </div>\n                </container>\n            )\n        }\n\n        else if (this.state.page === 4) {\n            let shareLink = window.location.href + '?gameid='+this.state.game_id;\n            return (\n                <container>\n                    <div className=\"play\">\n                        <Col md={{ span: 4, offset: 4 }}>\n                           <h1 style={{ color: 'blue' }}>{'Share this link: ' + shareLink}</h1>\n                        </Col>\n                    </div>\n                </container>\n            )\n        }\n    }\n}\n\nReactDOM.render(\n    <Page />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] == squares[b] && squares[a] == squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nfunction isDraw(squares) {\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] == null) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"sourceRoot":""}